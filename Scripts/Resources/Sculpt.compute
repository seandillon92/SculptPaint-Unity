#pragma kernel Update
#pragma enable_d3d11_debug_symbols
#include "UnityCG.cginc"


#define SQRT_1_DIV_2 0.70710678118
#define DEG2RAD 0.0174533

RWByteAddressBuffer vertices;
uint stride;
uint size;

uint offset_pos;
uint offset_norm;
uint offset_tangent;

uint iteration_offset;
uint iteration;

float4x4 model;
float3 position;

float3 normal;
float3 tangent;
float3 bitangent;
float3 forward;

float rotation;

float radius;
float3 scale;
float aspect;

float maxDeformation;

float3 direction;

// 0 - World
// 1 - Local
// 2 - Tangent
uint space;

// 0 - local tangent
// 1 - global tangent
uint brushSpace;

Texture2D brushTexture;
SamplerState linearClamp;

float3 getBitangent(float3 normal, float4 tangent) {
    return cross(normal, tangent.xyz) * tangent.w;
}

float4 getTangent(uint index) {
    uint offset = index * stride + offset_tangent;

    float4 tangent;
    tangent.x = asfloat(vertices.Load(offset));
    tangent.y = asfloat(vertices.Load(offset +size));
    tangent.z = asfloat(vertices.Load(offset +size * 2));
    tangent.w = asfloat(vertices.Load(offset +size * 3));
    return tangent;
}

float3 getNormal(uint index) {
    uint offset = index * stride + offset_norm;
    float3 normal;
    normal.x = asfloat(vertices.Load(offset));
    normal.y = asfloat(vertices.Load(offset +size));
    normal.z = asfloat(vertices.Load(offset +size * 2));

    return normal;
}

float4 getPosition(uint index) {

    uint offset = index * stride + offset_pos;
    uint x = vertices.Load(offset);
    uint y = vertices.Load(offset +size);
    uint z = vertices.Load(offset +size * 2);

    float4 vertex;
    vertex.x = asfloat(x);
    vertex.y = asfloat(y);
    vertex.z = asfloat(z);
    vertex.w = 1.0f;

    return vertex;
}

void setPosition(uint index, float3 vertex) {
    uint offset = index * stride + offset_pos;
    // Write the modified vertex position
    vertices.Store(offset, asuint(vertex.x));
    vertices.Store(offset +size, asuint(vertex.y));
    vertices.Store(offset +size * 2, asuint(vertex.z));
}

float3 projectPlane(float3 v, float3 n) {
    return v - n * dot(v, n) / dot(n, n);
}

float3x3 rotateMatrix(float angle, float3 axis) {
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c
    );
}

[numthreads(1, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID) {
    // Fetch the current vertex position
    uint index = id.x + iteration * iteration_offset;

    float3 vertex = getPosition(index);

    float3 difference = (position - vertex) * scale.x * radius;

    if (length(difference) > SQRT_1_DIV_2) {
        return;
    }

    float3x3 transform;
    if (brushSpace == 0) {
        float3 normal = getNormal(index);
        float4 tangent = float4(mul(rotateMatrix(DEG2RAD * rotation, normal), projectPlane(forward, normal)), 1.0);
        float3 bitangent = getBitangent(normal, tangent);
        transform = float3x3(tangent.xyz, bitangent, normal);
    } else {
        transform = float3x3(tangent, bitangent, normal);
    }

    float2 uv = mul(transform, difference).xy;
    uv.y *= aspect;
    uv += float2(0.5f, 0.5f);

    if (uv.x > 1 || uv.y > 1 || uv.x < 0 || uv.y < 0) {
        return;
    }

    float w = brushTexture.SampleLevel(linearClamp, uv, 0, 0).a;

    if (space == 2) //tangent space
    {
        direction = mul(transpose(transform), direction);
    }

    // Modify the vertex position
    vertex.xyz += direction * lerp(0, maxDeformation, w);
    setPosition(index, vertex);
}