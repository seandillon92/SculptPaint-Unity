// Each #kernel tells which function to compile; you can have many kernels
#pragma enable_d3d11_debug_symbols
#pragma kernel Stamp
#pragma kernel Dissipate

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float2> Write;
Texture2D<float2> Read;

float pressure;
float dissipation;
float delay;

[numthreads(8,8,1)]
void Dissipate(uint3 id : SV_DispatchThreadID)
{
    float r = Read[id.xy];
    if (r==0) 
    {
        Write[id.xy] = Read[id.xy];
        return;
    }
    r += dissipation;
    r = min(r, 0);

   Write[id.xy] = float2(r, -1 - r);
}

[numthreads(8, 8, 1)]
void Stamp(uint3 id : SV_DispatchThreadID) {
    // take neighbour values into account to battle rasterization
    // artefact
    float read = Read[id.xy];
    float t = Read[id.xy + float2(0, 1)];
    float b = Read[id.xy - float2(0, 1)];
    float l = Read[id.xy - float2(1, 0)];
    float r = Read[id.xy + float2(1, 0)];
    float tr = Read[id.xy + float2(1,1)];
    float tl = Read[id.xy + float2(-1, 1)];
    float br = Read[id.xy + float2(1, -1)];
    float bl = Read[id.xy + float2(-1, -1)];

    float maxValue = max(max(max(max(t,b), l),t), read);
    maxValue = max(maxValue, max(tr, max(tl, max(br,bl))));
    if (maxValue == 0) 
    { 
        return;
    }
    Write[id.xy] = -(saturate(r) + delay);
}





